<?php
/**
 * Copyright 2017, Cake Development Corporation (http://cakedc.com)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright 2017, Cake Development Corporation (http://cakedc.com)
 * @link https://www.cakedc.com
 * @license MIT License (http://www.opensource.org/licenses/mit-license.php)
 */
namespace CakeDC\Intl\TestCase;

use DateTime;
use DateTimeZone;
use IntlCalendar;
use IntlGregorianCalendar;
use IntlTimeZone;
use Locale;
use PHPUnit_Framework_TestCase;

class IntlCalendarTest extends PHPUnit_Framework_TestCase
{
    function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    function testAdd()
    {
        ini_set("intl.default_locale", "nl");

        $time = strtotime('2012-02-29 00:00:00 +0000');
        $time2 = strtotime('2012-03-01 05:06:07 +0000');

        $intlcal = IntlCalendar::createInstance('UTC');
        $intlcal->setTime($time * 1000);
        $intlcal->add(IntlCalendar::FIELD_DAY_OF_MONTH, 1);
        $intlcal->add(IntlCalendar::FIELD_HOUR, 5);
        $intlcal->add(IntlCalendar::FIELD_MINUTE, 6);
        intlcal_add($intlcal, IntlCalendar::FIELD_SECOND, 7);

        var_dump(
            (float)$time2 * 1000,
            $intlcal->getTime());
    }

    function testClear()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('UTC');
        var_dump($intlcal->clear());
        var_dump(
            $intlcal->get(IntlCalendar::FIELD_YEAR),
            $intlcal->get(IntlCalendar::FIELD_MONTH),
            $intlcal->get(IntlCalendar::FIELD_DAY_OF_MONTH),
            $intlcal->get(IntlCalendar::FIELD_HOUR),
            $intlcal->get(IntlCalendar::FIELD_MINUTE),
            $intlcal->get(IntlCalendar::FIELD_SECOND),
            $intlcal->get(IntlCalendar::FIELD_MILLISECOND)
        );

        $intlcal2 = IntlCalendar::createInstance('Europe/Amsterdam');
        intlcal_clear($intlcal2, null);
        var_dump($intlcal2->getTime());

    }

    function testClearArgVariation()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('UTC');
        $intlcal->setTime(strtotime('2012-02-29 05:06:07 +0000') * 1000);
//print_R($intlcal);
        var_dump($intlcal->isSet(IntlCalendar::FIELD_MONTH));
        var_dump($intlcal->clear(IntlCalendar::FIELD_MONTH));
        var_dump($intlcal->isSet(IntlCalendar::FIELD_MONTH));
//print_R($intlcal);
        var_dump(
            $intlcal->getTime(),
            strtotime('2012-01-29 05:06:07 +0000') * 1000.
        );
    }

    function testCreateInstance()
    {
        ini_set("intl.default_locale", "nl");

        date_default_timezone_set('Europe/Amsterdam');

        $cal = IntlCalendar::createInstance();
        print_R($cal->getTimeZone());
        print_R($cal->getLocale(Locale::ACTUAL_LOCALE));
        echo "\n";
        print_R($cal->getType());
        echo "\n";

        $timeMillis = $cal->getTime();
        $time = time();

        var_dump(abs($timeMillis - $time * 1000) < 2000);

    }

    function testCreateINstanceArgVariations()
    {
        ini_set("intl.default_locale", "nl");

        date_default_timezone_set('Europe/Amsterdam');

        $cal = intlcal_create_instance('Europe/Amsterdam');
        print_R($cal->getTimeZone());
        print_R($cal->getLocale(Locale::ACTUAL_LOCALE));
        echo "\n";

        $cal = intlcal_create_instance('Europe/Lisbon', null);
        print_R($cal->getTimeZone());
        print_R($cal->getLocale(Locale::ACTUAL_LOCALE));
        echo "\n";

        $cal = intlcal_create_instance(IntlTimeZone::createTimeZone('Europe/Lisbon'));
        print_R($cal->getTimeZone());
        print_R($cal->getLocale(Locale::ACTUAL_LOCALE));
        echo "\n";

        $cal = intlcal_create_instance(null, "pt");
        print_R($cal->getTimeZone());
        print_R($cal->getLocale(Locale::ACTUAL_LOCALE));
        echo "\n";

        $cal = intlcal_create_instance("Europe/Lisbon", "pt");
        print_R($cal->getTimeZone());
        print_R($cal->getLocale(Locale::ACTUAL_LOCALE));
        echo "\n";

    }

    function testFieldDifferences()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('UTC');
        $intlcal->setTime(strtotime('2012-02-29 05:06:07 +0000') * 1000);
        var_dump(
            $intlcal->fieldDifference(
                strtotime('2012-02-29 06:06:08 +0000') * 1000,
                IntlCalendar::FIELD_SECOND),
            $intlcal->get(IntlCalendar::FIELD_HOUR_OF_DAY));


        $intlcal->setTime(strtotime('2012-02-29 05:06:07 +0000') * 1000);
        var_dump(
            intlcal_field_difference(
                $intlcal,
                strtotime('2012-02-29 06:07:08 +0000') * 1000,
                IntlCalendar::FIELD_MINUTE));

    }

    function testFromDateTime()
    {
        ini_set("intl.default_locale", "nl_NL");
        date_default_timezone_set('Europe/Lisbon');

        $cal = IntlCalendar::fromDateTime('2012-01-01 00:00:00 Europe/Rome');
        var_dump(
            $cal->getTime(),
            strtotime('2012-01-01 00:00:00 Europe/Rome') * 1000.,
            $cal->getTimeZone()->getID(),
            $cal->getLocale(1)
        );
        echo "\n";

        $cal = IntlCalendar::fromDateTime(new DateTime('2012-01-01 00:00:00 PST'), "pt_PT");
        var_dump(
            $cal->getTime(),
            strtotime('2012-01-01 00:00:00 PST') * 1000.,
            $cal->getTimeZone()->getID(),
            $cal->getLocale(1)
        );

        echo "\n";

        $cal = intlcal_from_date_time(new DateTime('2012-01-01 00:00:00 +03:40'));
        var_dump(
            $cal->getTime(),
            strtotime('2012-01-01 00:00:00 +03:40') * 1000.,
            $cal->getTimeZone()->getID());
    }

    function testGet()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('UTC');
        $intlcal->set(IntlCalendar::FIELD_DAY_OF_MONTH, 4);

        var_dump($intlcal->get(IntlCalendar::FIELD_DAY_OF_MONTH));
        var_dump(intlcal_get($intlcal, IntlCalendar::FIELD_DAY_OF_MONTH));

    }

    function testGetSetRepeatedWallTimeOption()
    {
        ini_set("intl.default_locale", "nl");

        date_default_timezone_set('Europe/Amsterdam');

//28 October 2012, transition from DST
        $intlcal = new IntlGregorianCalendar(2012, 9, 28, 0, 0, 0);
        var_dump($intlcal->setRepeatedWallTimeOption(IntlCalendar::WALLTIME_LAST));
        var_dump($intlcal->getRepeatedWallTimeOption());
        $intlcal->set(IntlCalendar::FIELD_HOUR_OF_DAY, 2);
        $intlcal->set(IntlCalendar::FIELD_MINUTE, 30);
        var_dump(
            strtotime('2012-10-28 02:30:00 +0100'),
            (int)($intlcal->getTime() / 1000)
        );

        var_dump(intlcal_set_repeated_wall_time_option($intlcal, IntlCalendar::WALLTIME_FIRST));
        var_dump(intlcal_get_repeated_wall_time_option($intlcal));
        $intlcal->set(IntlCalendar::FIELD_HOUR_OF_DAY, 2);
        $intlcal->set(IntlCalendar::FIELD_MINUTE, 30);
        var_dump(
            strtotime('2012-10-28 02:30:00 +0200'),
            (int)($intlcal->getTime() / 1000)
        );
    }

    function testGetSetSkippedWallTimeOption()
    {
        ini_set("intl.default_locale", "nl");

        date_default_timezone_set('Europe/Amsterdam');

//25 March 2012, transition to DST
        $intlcal = new IntlGregorianCalendar(2012, 2, 25, 0, 0, 0);
        var_dump($intlcal->getSkippedWallTimeOption());
        $intlcal->set(IntlCalendar::FIELD_HOUR_OF_DAY, 2);
        $intlcal->set(IntlCalendar::FIELD_MINUTE, 30);
        echo "Should be 3h30\n";
        var_dump(
            $intlcal->get(IntlCalendar::FIELD_HOUR_OF_DAY),
            $intlcal->get(IntlCalendar::FIELD_MINUTE)
        );

        var_dump($intlcal->setSkippedWallTimeOption(IntlCalendar::WALLTIME_FIRST));
        var_dump(intlcal_get_skipped_wall_time_option($intlcal));
        $intlcal->set(IntlCalendar::FIELD_HOUR_OF_DAY, 2);
        $intlcal->set(IntlCalendar::FIELD_MINUTE, 30);
        echo "Should be 1h30\n";
        var_dump(
            $intlcal->get(IntlCalendar::FIELD_HOUR_OF_DAY),
            $intlcal->get(IntlCalendar::FIELD_MINUTE)
        );

        var_dump(intlcal_set_skipped_wall_time_option($intlcal, IntlCalendar::WALLTIME_NEXT_VALID));
        var_dump($intlcal->getSkippedWallTimeOption());
        $intlcal->set(IntlCalendar::FIELD_HOUR_OF_DAY, 2);
        $intlcal->set(IntlCalendar::FIELD_MINUTE, 30);
        echo "Should be 3h00\n";
        var_dump(
            $intlcal->get(IntlCalendar::FIELD_HOUR_OF_DAY),
            $intlcal->get(IntlCalendar::FIELD_MINUTE)
        );

    }

    function testGetAvailableLocales()
    {
        ini_set("intl.default_locale", "nl");

        $locales = IntlCalendar::getAvailableLocales();
        var_dump(count($locales) > 100);

        $locales = intlcal_get_available_locales();
        var_dump(in_array('pt', $locales));

    }

    function testFetDayOfWeekType()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('UTC');
        $intlcal->setTime(strtotime('2012-02-29 00:00:00 +0000') * 1000);
        var_dump(
            intlcal_get_day_of_week_type($intlcal, IntlCalendar::DOW_SUNDAY),
            $intlcal->getDayOfWeekType(IntlCalendar::DOW_MONDAY),
            $intlcal->getDayOfWeekType(IntlCalendar::DOW_TUESDAY),
            $intlcal->getDayOfWeekType(IntlCalendar::DOW_FRIDAY),
            $intlcal->getDayOfWeekType(IntlCalendar::DOW_SATURDAY)
        );

    }

    function testGetErrorCodeErroMessage()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = new IntlGregorianCalendar(2012, 1, 29);
        var_dump(
            $intlcal->getErrorCode(),
            intlcal_get_error_code($intlcal),
            $intlcal->getErrorMessage(),
            intlcal_get_error_message($intlcal)
        );
        $intlcal->add(IntlCalendar::FIELD_SECOND, 2147483647);
        $intlcal->fieldDifference(-PHP_INT_MAX, IntlCalendar::FIELD_SECOND);

        var_dump(
            $intlcal->getErrorCode(),
            intlcal_get_error_code($intlcal),
            $intlcal->getErrorMessage(),
            intlcal_get_error_message($intlcal)
        );

    }

    function testGetFirstDayOrWeek()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('UTC');
        var_dump($intlcal->getFirstDayOfWeek());
        var_dump(intlcal_get_first_day_of_week($intlcal));

    }

    function testGetKeywordValuesForLocale()
    {
        ini_set("intl.default_locale", "nl");

        print_r(
            iterator_to_array(
                IntlCalendar::getKeywordValuesForLocale('calendar', 'pt', true)
            ));
        echo "\n";

        $var = iterator_to_array(
            intlcal_get_keyword_values_for_locale('calendar', 'pt', false)
        );
        var_dump(count($var) > 8);
        var_dump(in_array('japanese', $var));

    }

    function testGetLocale()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('UTC');
        var_dump($intlcal->getLocale(Locale::ACTUAL_LOCALE));
        var_dump(intlcal_get_locale($intlcal, Locale::VALID_LOCALE));

    }

    function testGetMinimalDaysInFirstWeek()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('UTC');
        var_dump($intlcal->getMinimalDaysInFirstWeek());
        var_dump(intlcal_get_minimal_days_in_first_week($intlcal));
    }

    function testGetNow()
    {
        ini_set("intl.default_locale", "nl");

        $now = IntlCalendar::getNow();
        $proc_now = intlcal_get_now();
        $time = time();
        var_dump(abs($now - $proc_now) < 500);
        var_dump(abs($time * 1000 - $proc_now) < 2000);
    }

    function testGetTime()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('UTC');
        $intlcal->clear();
        $intlcal->set(IntlCalendar::FIELD_YEAR, 2012);
        $intlcal->set(IntlCalendar::FIELD_MONTH, 1 /* Feb */);
        $intlcal->set(IntlCalendar::FIELD_DAY_OF_MONTH, 29);

        $time = strtotime('2012-02-29 00:00:00 +0000');

        var_dump((float)$time * 1000, $intlcal->getTime());

    }

    function testGetTImeZone()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('GMT+00:01');
        print_r($intlcal->getTimeZone());
        print_r(intlcal_get_time_zone($intlcal));

    }

    function testGetType()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance();
        VAR_DUMP($intlcal->getType());
        $intlcal = IntlCalendar::createInstance(null, "nl_NL@calendar=hebrew");
        VAR_DUMP(intlcal_get_type($intlcal));
    }

    function testGetWeekendTransition()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance();
        var_dump($intlcal->getWeekendTransition(IntlCalendar::DOW_SUNDAY));
        var_dump(intlcal_get_weekend_transition($intlcal, IntlCalendar::DOW_SUNDAY));
    }

    function testGetMaxActualMacLeastMax()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('UTC');
        $intlcal->setTime(strtotime('2012-02-29 05:06:07 +0000') * 1000);
        var_dump(
            $intlcal->getLeastMaximum(IntlCalendar::FIELD_DAY_OF_MONTH),
            intlcal_get_least_maximum($intlcal, IntlCalendar::FIELD_DAY_OF_MONTH),
            $intlcal->getActualMaximum(IntlCalendar::FIELD_DAY_OF_MONTH),
            intlcal_get_actual_maximum($intlcal, IntlCalendar::FIELD_DAY_OF_MONTH),
            $intlcal->getMaximum(IntlCalendar::FIELD_DAY_OF_MONTH),
            intlcal_get_maximum($intlcal, IntlCalendar::FIELD_DAY_OF_MONTH)
        );
    }

    function testGetMinActualMinGreatestMin()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('UTC');
        $intlcal->setTime(strtotime('2012-02-29 05:06:07 +0000') * 1000);
        var_dump(
            $intlcal->getGreatestMinimum(IntlCalendar::FIELD_DAY_OF_MONTH),
            intlcal_get_greatest_minimum($intlcal, IntlCalendar::FIELD_DAY_OF_MONTH),
            $intlcal->getActualMinimum(IntlCalendar::FIELD_DAY_OF_MONTH),
            intlcal_get_actual_minimum($intlcal, IntlCalendar::FIELD_DAY_OF_MONTH),
            $intlcal->getMinimum(IntlCalendar::FIELD_DAY_OF_MONTH),
            intlcal_get_minimum($intlcal, IntlCalendar::FIELD_DAY_OF_MONTH)
        );
    }

    function testInDaylightTime()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('Europe/Amsterdam');
        $intlcal->setTime(strtotime('2012-01-01') * 1000);
        var_dump($intlcal->inDaylightTime());
        $intlcal->setTime(strtotime('2012-04-01') * 1000);
        var_dump(intlcal_in_daylight_time($intlcal));

    }

    function testIsLenientSetLenient()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal1 = IntlCalendar::createInstance('UTC');
        var_dump($intlcal1->isLenient());
        var_dump(intlcal_is_lenient($intlcal1));
        var_dump($intlcal1->setLenient(false));
        var_dump($intlcal1->isLenient());
        var_dump(intlcal_set_lenient($intlcal1, true));
        var_dump($intlcal1->isLenient());
    }

    function testIsEquivalentTo()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal1 = IntlCalendar::createInstance('Europe/Amsterdam');
        $intlcal2 = IntlCalendar::createInstance('Europe/Lisbon');
        $intlcal3 = IntlCalendar::createInstance('Europe/Amsterdam', "nl_NL@calendar=islamic");
        $intlcal4 = IntlCalendar::createInstance('Europe/Amsterdam');
        $intlcal4->roll(IntlCalendar::FIELD_MONTH, true);

        var_dump(
            "1 - 1",
            $intlcal1->isEquivalentTo($intlcal1),
            "1 - 2",
            $intlcal1->isEquivalentTo($intlcal2),
            "1 - 3",
            $intlcal1->isEquivalentTo($intlcal3),
            "1 - 4",
            $intlcal1->isEquivalentTo($intlcal4)
        );
    }

    function testIsSet()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('UTC');
        var_dump($intlcal->isSet(IntlCalendar::FIELD_MINUTE));
        $intlcal->clear(IntlCalendar::FIELD_MINUTE);
        var_dump($intlcal->isSet(IntlCalendar::FIELD_MINUTE));
        $intlcal->set(IntlCalendar::FIELD_MINUTE, 0);
        var_dump(intlcal_is_set($intlcal, IntlCalendar::FIELD_MINUTE));
    }

    function testIsWeekend()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('UTC');
        var_dump($intlcal->isWeekend(strtotime('2012-02-29 12:00:00 +0000') * 1000));
        var_dump(intlcal_is_weekend($intlcal, strtotime('2012-02-29 12:00:00 +0000') * 1000));
        var_dump($intlcal->isWeekend(strtotime('2012-03-11 12:00:00 +0000') * 1000));
    }

    function testRoll()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = new IntlGregorianCalendar(2012, 1, 28);
        var_dump($intlcal->roll(IntlCalendar::FIELD_DAY_OF_MONTH, 2));
        var_dump($intlcal->get(IntlCalendar::FIELD_MONTH)); //1 (Feb)
        var_dump($intlcal->get(IntlCalendar::FIELD_DAY_OF_MONTH)); //1

        $intlcal = new IntlGregorianCalendar(2012, 1, 28);
        var_dump(intlcal_roll($intlcal, IntlCalendar::FIELD_DAY_OF_MONTH, 2));
        var_dump($intlcal->get(IntlCalendar::FIELD_MONTH)); //1 (Feb)
        var_dump($intlcal->get(IntlCalendar::FIELD_DAY_OF_MONTH)); //1

    }

    function testRollArgVariation()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = new IntlGregorianCalendar(2012, 1, 28);
        var_dump($intlcal->roll(IntlCalendar::FIELD_DAY_OF_MONTH, true));
        var_dump($intlcal->get(IntlCalendar::FIELD_MONTH)); //1 (Feb)
        var_dump($intlcal->get(IntlCalendar::FIELD_DAY_OF_MONTH)); //29

        var_dump(intlcal_roll($intlcal, IntlCalendar::FIELD_DAY_OF_MONTH, false));
        var_dump($intlcal->get(IntlCalendar::FIELD_MONTH)); //1 (Feb)
        var_dump($intlcal->get(IntlCalendar::FIELD_DAY_OF_MONTH)); //28
    }

    function testSet()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance();
        var_dump($intlcal->set(IntlCalendar::FIELD_DAY_OF_MONTH, 2));
        var_dump($intlcal->get(IntlCalendar::FIELD_DAY_OF_MONTH));
        var_dump(intlcal_set($intlcal, IntlCalendar::FIELD_DAY_OF_MONTH, 3));
        var_dump($intlcal->get(IntlCalendar::FIELD_DAY_OF_MONTH));
    }

    function testSetArgVariations()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('UTC');
        $intlcal->clear();
        var_dump($intlcal->set(2012, 1, 29));
        var_dump($intlcal->getTime(),
            strtotime('2012-02-29 00:00:00 +0000') * 1000.);

//two minutes to midnight!
        var_dump($intlcal->set(2012, 1, 29, 23, 58));
        var_dump($intlcal->getTime(),
            strtotime('2012-02-29 23:58:00 +0000') * 1000.);

        var_dump($intlcal->set(2012, 1, 29, 23, 58, 31));
        var_dump($intlcal->getTime(),
            strtotime('2012-02-29 23:58:31 +0000') * 1000.);

    }

    function testSetFirstDayOfWeek()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('UTC');
        var_dump(
            IntlCalendar::DOW_TUESDAY,
            $intlcal->setFirstDayOfWeek(IntlCalendar::DOW_TUESDAY),
            $intlcal->getFirstDayOfWeek(),
            intlcal_set_first_day_of_week($intlcal, IntlCalendar::DOW_WEDNESDAY),
            $intlcal->getFirstDayOfWeek()
        );

    }

    function testSetMinimalDaysInFirstWeek()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('UTC');
        var_dump(
            $intlcal->setMinimalDaysInFirstWeek(6),
            $intlcal->getMinimalDaysInFirstWeek(),
            intlcal_set_minimal_days_in_first_week($intlcal, 5),
            $intlcal->getMinimalDaysInFirstWeek()
        );
    }

    function testSetTime()
    {
        ini_set("intl.default_locale", "nl");

        $time = strtotime('2012-02-29 00:00:00 +0000');

        $intlcal = IntlCalendar::createInstance('UTC');
        $intlcal->setTime($time * 1000);

        var_dump(
            (float)$time * 1000,
            $intlcal->getTime());

        $intlcal = IntlCalendar::createInstance('UTC');
        intlcal_set_time($intlcal, $time * 1000);
        var_dump(intlcal_get_time($intlcal));

    }

    function testSetTimeZone()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('Europe/Amsterdam');
        print_r($intlcal->getTimeZone()->getID());
        echo "\n";
        var_dump($intlcal->get(IntlCalendar::FIELD_ZONE_OFFSET));

        $intlcal->setTimeZone(IntlTimeZone::getGMT());
        print_r($intlcal->getTimeZone()->getID());
        echo "\n";
        var_dump($intlcal->get(IntlCalendar::FIELD_ZONE_OFFSET));

        intlcal_set_time_zone($intlcal,
            IntlTimeZone::createTimeZone('GMT+05:30'));
        print_r($intlcal->getTimeZone()->getID());
        echo "\n";
        var_dump($intlcal->get(IntlCalendar::FIELD_ZONE_OFFSET));

    }

    function testSetTimeWithZone()
    {
        ini_set("intl.default_locale", "nl");

        $intlcal = IntlCalendar::createInstance('Europe/Amsterdam');
        print_r($intlcal->getTimeZone()->getID());
        echo "\n";
        var_dump($intlcal->get(IntlCalendar::FIELD_ZONE_OFFSET));

        /* passing NULL has no effect */
        $intlcal->setTimeZone(null);
        print_r($intlcal->getTimeZone()->getID());
        echo "\n";
        var_dump($intlcal->get(IntlCalendar::FIELD_ZONE_OFFSET));


    }

    function testSetTimeZoneDiffWaysTimeZone()
    {
        ini_set("intl.default_locale", "nl");
        date_default_timezone_set('Europe/Amsterdam');

        $intlcal = new IntlGregorianCalendar();
        $intlcal->setTimeZone('Europe/Paris');
        var_dump($intlcal->getTimeZone()->getID());
        $intlcal->setTimeZone(new DateTimeZone('Europe/Madrid'));
        var_dump($intlcal->getTimeZone()->getID());

        $pstdate = new DateTime('2012-01-01 00:00:00 PST');
        $intlcal->setTimeZone($pstdate->getTimeZone());
        var_dump($intlcal->getTimeZone()->getID());

        $offsetdate = new DateTime('2012-01-01 00:00:00 -02:30');
        $intlcal->setTimeZone($offsetdate->getTimeZone());
        var_dump($intlcal->getTimeZone()->getID());
    }

    function testToDateTime()
    {
        ini_set('date.timezone', 'Europe/Lisbon');

        $cal = new IntlGregorianCalendar(2012, 04, 17, 17, 35, 36);

        $dt = $cal->toDateTime();

        var_dump($dt->format("c"), $dt->getTimeZone()->getName());

    }

}